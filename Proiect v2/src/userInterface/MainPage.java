package userInterface;

import Netflix.membership.Client;
import Netflix.shows.Films;
import repositories.FilmsRepository;
import repositories.MyListRepository;
import userInterface.login.LoginFrame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * @author: cati
 */
public class MainPage extends JFrame implements ActionListener {

    private Client client;
    private MyListRepository myListRepository;
    private Container container = getContentPane();
    private JButton logoutButton = new JButton("Logout");
    private JButton updateInfoButton = new JButton("Update Info");
    private JLabel mylistLabel = new JLabel("My List");
    private JButton addToMyListButton = new JButton("Add to My List");
    private JLabel chooseANewShowLabel = new JLabel("Choose a new show to watch!");
    private JLabel newReleasesLabel = new JLabel("See the new releases shows.");
    private JLabel goToMyListLabel = new JLabel("Go to my list");
    private JTextField searchShowTextField = new JTextField();
    private JButton showRemoveButton = new JButton("Remove");
    private JButton discoverAShowButton = new JButton("Look for the show you want");

    private DefaultListModel model = new DefaultListModel();
    private JList mylistList = new JList(model);

    String[] filmsToList() {
        FilmsRepository filmsRepository = new FilmsRepository();
        ArrayList<Films> films = filmsRepository.getAllFilms();
        String[] filmsToList = new String[films.size()];
        int i = 0;
        for (Films film : films) {
            filmsToList[i++] = film.toString();
        }
        return filmsToList;
    }

    MainPage(Client client) {
        myListRepository = new MyListRepository();
        this.client = client;

        setLayoutManager();
        setLocationAndSizes();
        addComponentsToContainer();
        addActionEvent();

        //for (MyList myList : myListRepository.get)
    }

    private void setLayoutManager() {
        container.setLayout(null);
    }

    private void setLocationAndSizes() {
        updateInfoButton.setBounds(20, 10, 100, 20);
        logoutButton.setBounds(255, 10, 80, 20);
        mylistLabel.setBounds(120, 40, 370, 20);
        chooseANewShowLabel.setBounds(80, 70, 350, 20);
        newReleasesLabel.setBounds(20, 140, 250, 20);
        searchShowTextField.setBounds(280, 140, 55, 20);
        addToMyListButton.setBounds(20, 180, 315, 20);
        mylistList.setBounds(20, 220, 315, 200);
        showRemoveButton.setBounds(255, 440, 80, 20);
        goToMyListLabel.setBounds(120, 40, 370, 20);
        discoverAShowButton.setBounds(255, 10, 80, 30);
    }

    private void addComponentsToContainer() {
        container.add(updateInfoButton);
        container.add(logoutButton);

        container.add(searchShowTextField);
        container.add(discoverAShowButton);
        container.add(newReleasesLabel);
        container.add(chooseANewShowLabel);
        container.add(addToMyListButton);
        container.add(mylistLabel);
        container.add(goToMyListLabel);
        container.add(mylistList);
        container.add(showRemoveButton);
    }

    public void addActionEvent() {
        updateInfoButton.addActionListener(this);
        logoutButton.addActionListener(this);
        addToMyListButton.addActionListener(this);
        showRemoveButton.addActionListener(this);
        discoverAShowButton.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent actionEvent) {
        if (actionEvent.getSource() == searchShowTextField) {
            String nameOfShow = searchShowTextField.getText();

        } else if (actionEvent.getSource() == addToMyListButton) {

        } else if (actionEvent.getSource() == discoverAShowButton) {

        } else if (actionEvent.getSource() == logoutButton) {
            JOptionPane.showMessageDialog(this, "You have been logged out");
            dispose();
            LoginFrame.main(new String[0]);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 2, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        updateInfoButton = new JButton();
        updateInfoButton.setText("Update Info");
        panel1.add(updateInfoButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logoutButton = new JButton();
        logoutButton.setText("Logut");
        panel1.add(logoutButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 6, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chooseANewShowLabel = new JLabel();
        chooseANewShowLabel.setText("Choose a new show ");
        panel1.add(chooseANewShowLabel, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addToMyListButton = new JButton();
        addToMyListButton.setText("Add to my list");
        panel1.add(addToMyListButton, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newReleasesLabel = new JLabel();
        newReleasesLabel.setText("Label");
        newReleasesLabel.setToolTipText("New Releases");
        panel1.add(newReleasesLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        goToMyListLabel = new JLabel();
        goToMyListLabel.setText("Label");
        panel1.add(goToMyListLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showRemoveButton = new JButton();
        showRemoveButton.setText("Remove show from my list");
        panel1.add(showRemoveButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        discoverAShowButton = new JButton();
        discoverAShowButton.setText("Discover a show ");
        panel1.add(discoverAShowButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }
}
